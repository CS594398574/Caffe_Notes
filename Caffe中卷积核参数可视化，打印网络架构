#-*-coding:utf-8-*-
import caffe
import numpy as np
import matplotlib.pyplot as plt
import os


caffe_root = '/home/hjl/GoogleNet/'

net = caffe.Net(caffe_root+"deploy.prototxt",
                caffe_root+"_iter__iter_10001.caffemodel",
                caffe.TEST)
for k,v in net.params.items():
    print (k, v[0].data.shape)

#编写一个函数，用于显示各层的参数
def show_feature(data, padsize=1, padval=0):
    data -= data.min()
    data /= data.max()

    # force the number of filters to be square
    n = int(np.ceil(np.sqrt(data.shape[0])))
    padding = ((0, n ** 2 - data.shape[0]), (0, padsize), (0, padsize)) + ((0, 0),) * (data.ndim - 3)
    data = np.pad(data, padding, mode='constant', constant_values=(padval, padval))

    # tile the filters into an image
    data = data.reshape((n, n) + data.shape[1:]).transpose((0, 2, 1, 3) + tuple(range(4, data.ndim + 1)))
    data = data.reshape((n * data.shape[1], n * data.shape[3]) + data.shape[4:])
    plt.imshow(data)
    plt.axis('off')
    plt.show()
weight = net.params["conv1/7x7_s2"][0].data
print weight.shape  #(64, 3, 7, 7) 64个7*7的3通道filter
show_feature(weight.transpose(0, 2, 3, 1))
# 第二个卷积层的权值参数，共有192*64个filter,每个filter大小为5*5
weight = net.params["conv2/3x3"][0].data
print weight.shape
show_feature(weight.reshape(192*64,3,3)[:1024])
# 第三个卷积层的权值，共有64*32个filter,每个filter大小为5*5，取其前1024个进行可视化
weight = net.params["conv2/3x3_reduce"][0].data
print weight.shape
show_feature(weight.reshape(64*64,1,1)[:1024])
